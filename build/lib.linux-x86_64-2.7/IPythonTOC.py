'''
Created on Oct 18, 2014
Class with methods for generating HTML anchors in markdown strings in IPython notebook and 
for markdown HTML links to these anchors for use as entries in a TOC markdown cell

Class works as a singleton as there is only one title property in the class shared by all instances. Thus,
the class only really needs to instanciated once.


Useage:

toc = IPythonTOC()

toc.title = "some title - may include symbols that will be replaced with underscores" # optional

toc.genTOCMarkdownCell() # optional title string argument not required if toc.title has been set
#called in an IPython notebook, the output can be copied and pasted into a markdown cell and 
# thereby create an HTML anchor that can be linked to from a TOC markdown cell at the top of the notebook

toc.genTOCEntry() # optional title string argument not required if toc.title has been set
#called in an IPython notebook, the output can be copied and pasted into a markdown cell and 
# thereby create an HTML link that can be shown in a TOC markdown cell at the top of the notebook
# the TOC link will go to the previously created HTML anchor 
@author: bren
'''
import re

class IPythonTOC(object):
    '''
    Class for generating markdown cells and TOC entries for cells in notebook
    Functions as a singleton with title as a property of the class
    '''
    _title = None
    
    @property
    def title(self):
        return IPythonTOC._title
    
    @title.setter
    def title(self, s):
        """ title must be a string with len > 0 """
        assert isinstance(s, str) and len(s)
        IPythonTOC._title = s
    
    @title.getter
    def title(self):
        return IPythonTOC._title
    
    @classmethod
    def genTOCMarkdownCell(cls, title=None):
        """ may be called with title string or will use title property to generate HTML anchor and
        markdown title suitable for copying into a markdown cell.
        If called with a title string, the class property will be set """
        if isinstance(title, str):
            cls._title = title
        if not len(cls._title):
            raise RuntimeError('missing title')

        mdc =  "<a id='{}'></a>\n".format(cls.formatTitle(cls._title))
        mdc += '###{}'.format(cls._title)
        return mdc
        
    @classmethod
    def genTOCEntry(cls, title=None):
        """ May be called with title string or will use title property to generate a string
        suitable for use in an embedded HTML anchor.
        
        If called with a title string, the class property will be set """
        if isinstance(title, str):
            cls._title = title
        if not len(cls._title):
            RuntimeError('missing title')
        
        return "[{}](#{})".format(cls._title, IPythonTOC.formatTitle(cls._title))

    @classmethod
    def formatTitle(cls, title=None):
        """ <ay be called with title string or will use title property to generate HTML link
        to anchor generated by genTOCMarkdownCell. The output is suitable for copying into a 
        TOC markdown cell.
        
        If called with a title string, the class property will be set """
        
        if isinstance(title, str):
            cls._title = title
        if not len(cls._title):
            RuntimeError('missing title')
        
        return re.sub('[ &/,+-]+','_',cls._title)
    def __init__(self):
        '''
        Constructor
        '''
    
